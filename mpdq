#!/bin/bash

########################################################################
# Definitions
########################################################################

ConfigDir=$HOME/.config/mpdq
ConfigFile=$HOME/.config/mpdq/mpdq.ini
ConfigLogFile=$HOME/.config/mpdq/playedsongs.log
RunningLogRotateTime=$(TZ=UTC0 printf '%(%s)T\n' '-1')
SCRIPT=$0
InstructionFile=""
DefaultPriority=1

########################################################################
# Functions
########################################################################


function init_config() {

    if [ -f "$ConfigLogFile" ];then
        touch "$ConfigLogFile"
    fi    
}

function read_variables() {

    if [ -f "$ConfigFile" ];then
        bob=$(cat "$ConfigFile") 
    fi
    # If there's no config file or a line is malformed or missing, sub in the default value
    if [[ `echo "$bob" | grep -c -e "^musicdir="` > 0 ]];then MPDBASE=$(echo "$bob" | grep -e "^musicdir=" | cut -d = -f 2- );else MPDBASE="$HOME/Music";fi
    if [[ `echo "$bob" | grep -c -e "^mpdserver="` > 0 ]];then MPD_HOST=$(echo "$bob" | grep -e "^mpdserver=" | cut -d = -f 2- );else MPD_HOST="localhost";fi    
    if [[ `echo "$bob" | grep -c -e "^mpdport="` > 0 ]];then MPD_PORT=$(echo "$bob" | grep -e "^mpdport=" | cut -d = -f 2- );else MPD_PORT="6600";fi
    if [[ `echo "$bob" | grep -c -e "^mpdpass="` > 0 ]];then MPD_PASS=$(echo "$bob" | grep -e "^mpdpass=" | cut -d = -f 2- );else MPD_PASS="";fi
    if [[ `echo "$bob" | grep -c -e "^queuesize="` > 0 ]];then PLAYLIST_TRIGGER=$(echo "$bob" | grep -e "^queuesize=" | cut -d = -f 2- );else PLAYLIST_TRIGGER="10";fi
    if [[ `echo "$bob" | grep -c -e "^hours="` > 0 ]];then SONGAGE=$(echo "$bob" | grep -e "^hours=" | cut -d = -f 2- );else SONGAGE="8";fi

    # Only need to do this at the beginning of the run
    mapfile -t Genre < <( mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT list genre | sed -r 's/\ /_/g' | sed -r 's/\&/ and /g' )
}

function rotate_songlog {

    tempfile=$(mktemp)
    currenttime=$(TZ=UTC0 printf '%(%s)T\n' '-1')
    difftime=$(( SONGAGE * 60 * 60 ))
    hightime=$(( currenttime-difftime ))
    echo "Eliminating song log entries older than $SONGAGE hours."
    cat "$ConfigLogFile" | awk -F '@@@' '$1 <= $hightime' > "$tempfile"
    mv -f "$tempfile" "$ConfigLogFile"
}


function read_instructions() {

    if [ -f "$InstructionFile" ];then
        while read -r line; do
            IGenre=$(echo "$line" | cut -d = -f 1) 
            IWeight=$(echo "$line" | cut -d = -f 2-) 
            
            if [ "${IGenre}" = "Default" ];then
                if [ -z "$DefaultWeight" ];then
                    DefaultWeight="$IWeight"
                fi
            else
                ModGenre+=("${IGenre}")  
                ModValue+=("${IWeight}")  
            fi
        done < "$InstructionFile"
    fi
}


function determine_genre_weights {
    
#This is not light, but it's only done once a run.
#loop through genre, if not in array ModGenre, then apply DefaultWeight
    for ((i = 0; i < ${#Genre[@]}; i++));do
        for ((i2 = 0; i2 < ${#ModGenre[@]}; i2++));do
            if [[ "${Genre[$i]}" == "${ModGenre[$i2]}" ]];then   #Think I remembered the syntax rightly.
                GenreWeight+="${ModValue[$i2]}"
            else
                GenreWeight+="$DefaultWeight"
            fi
        done
    done

#populating the "weighted" array   

    for ((i = 0; i < ${#Genre[@]}; i++));do
        for ((i2 = 0; i2 < ${#GenreWeight[$i]}; i2++));do 
            ChooseGenre+=("${Genre[$i]}")  
            #add the name GenreWeight times... giving us a sloppy weighting mechanism (and if it's zero, it SHOULD exit before hitting this)
        done
    done

}


function choose_next_song {
    
    #Take the already weighted array and choose a random element
    ChosenGenre=${ChooseGenre["$[RANDOM % ${#ChooseGenre[@]}]"]}
    SongStem=$(mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT search genre "$ChosenGenre" | shuf -n1)
    SongFile="$MPDBASE/$SongStem"
    #check against the previously played songs
    if cat "$ConfigLogFile" | grep -qF "$SongFile"; then
        echo "Song recently used; kicking back"
        SongFileToAdd=""
    else
        SongFileToAdd="$SongFile"
        #mark that we used it.
        nowtime=$(TZ=UTC0 printf '%(%s)T\n' '-1')
        echo "$nowtime@@@$SongFileToAdd" >> "$ConfigLogFile"
    fi
}

function need_next_song {

    SongFileToAdd=""

    #until it returns a valid match
    while [ -z "$SongFileToAdd" ];do
        choose_next_song
    done  
    
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT add "$SongFileToAdd"
    #reset match tests
    SongFileToAdd=""
}

function main {
    rotate_songlog
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --quiet consume on
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --quiet play
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --random off    
    (echo qman-startup; mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT idleloop) | while read event
    do
        # Messy, but closes all subprocesses out
        if [ ! -f /tmp/mpdq.pid ];then
            killing
        fi
        if [ "$event" = "mixer" ]
        then
            continue
        fi
        if [ "$event" = "update" ]
        then
            continue
        fi
        playlist_length=$(mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT playlist | wc -l)
        if [ $playlist_length -lt $PLAYLIST_TRIGGER ];then
            need_next_song
        fi  
        ctime=$(TZ=UTC0 printf '%(%s)T\n' '-1')
        Timertime=$(( ctime-3600 ))
        # Has it been an hour?
        if [[ $RunningLogRotateTime -lt $TimerTime ]];then
            rotate_songlog
            RunningLogRotateTime=$ctime
        fi
    done
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --quiet consume off
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --quiet pause-if-playing
}

function create_example(){
    
    echo "Default=1" > "$ConfigDir/example_instruction"
    mpc list genre | sed 's/$/=1/' >> "$ConfigDir/example_instruction"

}

function killing(){
    
    while read VPID; do
        if [ $VPID != "$$" ];then
            kill -9 "$VPID" &> /dev/null
        fi
    done < /tmp/mpdq.pid
    rm /tmp/mpdq.pid
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --quiet consume off
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --quiet pause-if-playing
    exit
}

function show_help {

echo "mpdq [-d #][-c /path/to/file][-khe]" 
echo "  -c [instruction file to use]" 
echo "  -d [override default priority # 1-10]" 
echo "  -k Kill existing mpdq process " 
echo "  -e Create example instruction file " 
echo "  -h Show this help message"
}

########################################################################
# Wherein we parse arguments
########################################################################
init_config
read_variables

while [ $# -gt 0 ]; do
option="$1"
    case $option in
        -e) 
            create_example
            exit
            ;;      
        -c) 
            shift
            InstructionFile="$1"
            ;;      
        -d)  
            shift
            DefaultWeight="$1"
            ;;
        -h)  
            show_help
            exit
            ;;   
        -k)  
            ps aux | grep $0 | grep --color=auto -v -e grep | awk '{print $2}' >> /tmp/mpdq.pid
            read_variables 
            killing
            ;;            
    esac
done
  #Will not be echoed if killing process, as killing exits the program first

            echo "$$" >> /tmp/mpdq.pid
                
                
            trap killing EXIT

            main
            ;;
